{"name":"seajs 模块化","tagline":"seaJS初步学习","body":"---\r\n### 一、开发场景\r\n1、js命名冲突\r\n命名空间可以一定程度的解决这个问题\r\n\r\n2、插件依赖\r\nshow.js依赖a.js，但开发show.js忘记告诉你使用show.js前要导入a.js。\r\n另一个严重的问题是，开发后期需要对show.js进行扩展,新的扩展需要依赖b.js，这时候需要去以前的页面再重新添加上b.js\r\n\r\n\r\n### 二、seajs小例子\r\n文件结构如下：\r\n![](http://b.picphotos.baidu.com/album/h%3D80%3Bq%3D90/sign=5be48ab3ef50352aae6128086832c6cb/a08b87d6277f9e2f661f980c1930e924b899f388.jpg)\r\n\r\nindex.html代码\r\n```\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n<meta charset=\"UTF-8\">\r\n<title>seajs</title>\r\n</head>\r\n<body>\r\n    <script type=\"text/javascript\" src=\"http://apps.bdimg.com/libs/seajs/2.3.0/sea.js\"></script>\r\n    <script type=\"text/javascript\">\r\n      //seajs.use('main');          //主入口文件，相对于sea.js位置\r\n        seajs.use('./js/main');     //主入口文件，相对于html位置\r\n    </script>\r\n</body>\r\n</html>\r\n```\r\nmain.js 代码\r\n```\r\ndefine(function(require, exports, module) {\r\n    var commonJs = require('./common');\r\n    commonJs.saySomething();\r\n});\r\n```\r\n\r\ncommon.js 代码\r\n``` \r\ndefine(function(require, exports, module) {\r\n    exports.saySomething = function() {\r\n        console.log('this is commonjs');\r\n    }\r\n});\r\n```\r\n\r\n### 三、seajs简短使用说明\r\n1、每个html中使用 seajs.use 来加载一个或者多个模块，模块名为对应的js文件名，可以省略.js后缀。也可以有seajs.config()来做相应的一些配置\r\n\r\n2、每个模块的书写格式，每个模块建议写为一个单独的js文件\r\n```\r\ndefine(function(require, exports, module) {\r\n    /* code */\r\n});\r\n```\r\n参数@parm说明\r\n`require` 用于导入该模块需要的依赖\r\n`exports` 用于为其他模块调用提供接口\r\n`module`  一些可以调试的信息，包括该模块的id、模块的路径、模块的依赖、对外接口等信息\r\n以上三个参数可以开发中建议全写上\r\n\r\n\r\n### 四、seajs的自动化工具\r\n由于seajs开发过程中是通过文件名来区分模块，势必会涉及一个页面导入js文件过多的现象，这时候需要自动化工具进行必要的js合并\r\n\r\n（1）不使用cmd插件合并的方法（不推荐）\r\n需要去为每个模块的定义别名\r\n以maim.js为例子，原代码\r\n```\r\ndefine(function(require, exports, module) {\r\n    var commonJs = require('./common');\r\n    commonJs.saySomething();\r\n});\r\n```\r\n改为\r\n```\r\ndefine('./js/main',['./common']function(require, exports, module) {\r\n    var commonJs = require('./common');\r\n    commonJs.saySomething();\r\n});\r\n```\r\n说明 `第一个参数`为该模块的ID别名， `第二个参数`为该模块所需要的依赖，其实这种写法才是完整的写法，只是前两个参数可以省略\r\n\r\n（2）使用cmd插件合并的方法\r\n\r\n* grunt插件 `grunt-cmd-transport` 和 `grunt-cmd-concat`  [教程链接](https://github.com/seajs/seajs/issues/538)。\r\n* gulp插件 `gulp-seajs-combo` [教程链接](https://www.npmjs.com/package/gulp-seajs-combo/) 。里面例子有个错误`.pipe( gulp.task('build/js') );`改为`.pipe( gulp.dest('build/js') )`\r\n\r\n**grunt插件**\r\n `grunt-cmd-transport` cmd语法转换，完成的任务就是上面说的模块别名改动，grunt自动帮我们完成\r\n `grunt-cmd-concat` 完成cmd文件的合并\r\n\r\n**gulp插件**\r\n`gulp-seajs-combo` 只需要对main.js操作就可以，gulp会自动将其需要的依赖合并\r\n\r\n【**待解决问题**】js合并压缩后我们一般都是以.min.js为后缀，这样又会导致主入口文件找不到文件的现象\r\n以main.js压缩为例子，压缩后为main.min.js，主入口还是会认为去找main.js文件\r\n现在测试下面几种方法可行\r\n\r\n* 修改主入口文件名字，不要以.min.js为后缀，缺点：不符合正常的命名规范\r\n* 修改seajs的主入口，改为`seajs.use('main.min')`，同时修改main.min.js文件中`id=main`模块，缺点：每次压缩后都需要进行这个操作（不推荐）\r\n* 使用seajs的配置设置，缺点：每个文件都需要做配置，线上的可行，但线下的又需要把配置去掉了\r\n```\r\nseajs.config({\r\n    base: \"./dist/\",\r\n    alias: {\r\n        'main': 'main.min'  // 别名：文件名\r\n    },\r\n});\r\nseajs.use('main');\r\n```\r\n有好的办法的同事请补充\r\n\r\n### 五、如何使用不符合cmd的插件\r\n比如jquery，从官网下载的是不能直接使用在seajs里面，需要我们对其进行改造( T.T )，jquery默认是支持AMD规范的赶脚\r\n[官网改造教程](https://github.com/seajs/seajs/issues/971)\r\n\r\n\r\n\r\n\r\n\r\n \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}